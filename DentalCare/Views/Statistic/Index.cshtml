@{
    Layout = "_DashboardLayout";
}

<div class="container-fluid pt-4 px-4 mb-4">
    <div class="page-header mb-4 text-primary">
        <div class="page-title">
            <h4>Statistic</h4>
        </div>
    </div>
    <div class="row g-4">
        <div class="col-lg-6 col-sm-6 col-12">
            <div class="form-group">
                <label for="year">Year</label>
                <select id="year" class="form-control bg-white">
                    <option value="2022">2022</option>
                    <option value="2023">2023</option>
                    <option value="2024">2024</option>
                    <option value="2025">2025</option>
                    <option value="2026">2026</option>
                    <option value="2027">2027</option>
                    <option value="2028">2028</option>
                    <option value="2029">2029</option>
                    <option value="2030">2030</option>
                    <option value="2031">2031</option>
                    <option value="2032">2032</option>
                </select>
            </div>
        </div>
        <div class="col-lg-6 col-sm-6 col-12">
            <div class="form-group">
                <label for="month">Month</label>
                <select id="month" class="form-control bg-white">
                    <option value="1">January</option>
                    <option value="2">February</option>
                    <option value="3">March</option>
                    <option value="4">April</option>
                    <option value="5">May</option>
                    <option value="6">June</option>
                    <option value="7">July</option>
                    <option value="8">August</option>
                    <option value="9">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                </select>
            </div>
        </div>
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light text-center rounded p-4 shadow-sm border border-1 h-100">
                <div class="d-flex align-items-center justify-content-between mb-4">
                    <h6 class="mb-0">Invoice Revenue</h6>
                </div>
                <canvas id="invoiceChart"></canvas>
            </div>
        </div>

        <div class="col-sm-12 col-xl-6">
            <div class="bg-light text-center rounded p-4 shadow-sm border border-1">
                <div class="d-flex align-items-center justify-content-between mb-4">
                    <h6 class="mb-0">Doctor Revenue</h6>
                </div>
                <canvas id="doctorChart"></canvas>
            </div>
        </div>
    </div>
    <a href="@Url.Action("Export", "Statistic")" class="btn btn-lg btn-primary btn-lg-square back-to-top" title="Export Data"><i class="fas fa-print"></i></a>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth() + 1;

    let invoiceChart;
    let doctorChart;

    document.getElementById("year").value = currentYear;
    document.getElementById("month").value = currentMonth;

    const updateChart = (year, month) => {
        fetch(`/Statistic/GetInvoiceRevenueByMonthAndYear?year=${year}&month=${month}`)
            .then(response => response.json())
            .then(data => {
                const labels = Object.keys(data).slice(0, -1);
                const revenueData = Object.values(data).slice(0, -1);

                const ctx1 = document.getElementById('invoiceChart').getContext('2d');

                if (invoiceChart) {
                    invoiceChart.destroy();
                }

                invoiceChart = new Chart(ctx1, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Month Invoice Revenue (VND)',
                            data: revenueData,
                            borderWidth: 1,
                            backgroundColor: 'rgba(0, 156, 255, .7)',
                            borderColor: 'rgba(0, 156, 255, .7)',
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error:', error));

        fetch(`/Statistic/GetDoctorRevenueByMonthAndYear?year=${year}&month=${month}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                const labels = Object.keys(data).slice(1);
                const revenueData = Object.values(data).slice(1);

                console.log(labels);
                console.log(revenueData);

                const ctx2 = document.getElementById('doctorChart').getContext('2d');

                if (doctorChart) {
                    doctorChart.destroy();
                }

                doctorChart = new Chart(ctx2, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Month Doctor Revenue (VND)',
                            data: revenueData,
                            borderWidth: 1,
                            backgroundColor: 'rgba(0, 156, 255, .7)',
                            borderColor: 'rgba(0, 156, 255, .7)',
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error:', error));
    };

    updateChart(currentYear, currentMonth);

    document.getElementById('year').addEventListener('change', () => {
        const year = document.getElementById('year').value;
        const month = document.getElementById('month').value;
        updateChart(year, month);
    });

    document.getElementById('month').addEventListener('change', () => {
        const year = document.getElementById('year').value;
        const month = document.getElementById('month').value;
        updateChart(year, month);
    });
</script>